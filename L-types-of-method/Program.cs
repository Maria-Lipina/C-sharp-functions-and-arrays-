using static System.Console;

//Четыре типа методов в С# (помним, что метод - это то же, что функция. Коробка, которая на вход получает данные и выводит новые данные. Подпрограмма в программе)

// 1. Не принимают аргументы и ничего НЕ возвращают (void-метод)

void Method1()
{
    WriteLine($"{DateTime.Now.DayOfWeek} {DateTime.Now.Day} {DateTime.Now.Month} {DateTime.Now.Year}");
}
Method1(); // Не забывайте скобки

// 2. Принимать аргументы могут, но ничего НЕ возвращают (void-метод)

void Method2(string msg, int count) // тот пример, где в вызове метода будет важно использовать так называемые именованные переменные
{
    int i = 0;
    while (i < count)
    {
        WriteLine(msg);
        i++;
    }
}
//Method2("В самом методе это формальный аргумент msg", 2);
Method2(count: 3, msg: "Хакуна матата");

// 3. НЕ принимают аргументы на входе, но возвращают что-то выходе (например, генерирует случайные данные)

int Method3 ()
{
   return DateTime.Now.Year; // интерполяция строк как в методе 1 здесь не прокатывает.
}

int year = Method3();
WriteLine(year);

// 4. Принимают аргумент на входе и возвращают данные на выходе (применяется чаще всего) 

string Method4(int count, string text)
{
string result = string.Empty; // сюда кладем результат метода, но так как пока его нет, для начала переменная объявлена пустой. string.Empty - это более правильные вариант с точки зрения наглядности, чем string result = "";
// Цикл for используется в разработке значительно чаще, чем while. На них уходит >90% использования в коде. Цикл с постусловием вы вряд ли где-нибудь найдете
//оператор цикла| инициализация счетчика| условие продолжения| изменение счетчика
for               (int i = 0;              i < 10;              i++)
    {
    result = result + text;
    }
return result;
}

string res = Method4(4, " concatinate it|");
WriteLine(res);


// А теперь для истории сравните с while
// while (i<count)
//     {
//     result = result + text;
//     i++;
//     }
//     return result;
// }
// ------------------------------------------------------------------------------------------------------------------------

// Для демонстрации цикла в цикле строим в терминале таблицу умножения

for (int i = 2; i <= 10; i++)
{
    for (int j = 2; j <= 10; j++)
    {
    WriteLine($"{i} * {j} = {i*j}");
    }
WriteLine();
}

// Для отработки методов и цикла в цикле сейчас будем менять символы в тексте

// маленькие буквы "п" на большие
// точки на вертикальные слэши |

// Для этого нужно знать вспомогательный функционал стандартной строки: нумерация символов на клавиатуре начинается с "0"
// string s = qwerty
//            012345
// s [3] - обращаемся к третьему символу в строке "r"

string text = "Голос портье остановил Реншо на полпути к лифту. " 
            + "Он обернулся и переложил сумку из одной руки в другую. "
            + "Во внутреннем кармане его пиджака похрустывал тяжелый конверт, набитый двадцати- и пятидесятидолларовыми купюрами. "
            + "Он прекрасно поработал, и Организация хорошо с ним расплатилась, хотя, как всегда, вычла в свою пользу двадцать процентов комиссионных. "
            + "Теперь Реншо хотелось принять душ и лечь спать";


string Replace(string TextIn, char OldValue, char NewValue)
{
string result = string.Empty;

int length = TextIn.Length;
for (int i = 0; i < length; i++)
{
    if (TextIn[i] == OldValue) result = result + $"{NewValue}";
    else result = result + $"{TextIn[i]}";
}

return result;
}

string TextOut = Replace(text, 'п', 'П'); // по ходу одинарные кавычки переворачивают string в char
WriteLine(TextOut);
WriteLine();
TextOut = Replace(text, '.', '|');
WriteLine(TextOut);
WriteLine();
TextOut = Replace(text, 'ю', '%');
WriteLine(TextOut);
WriteLine();
TextOut = Replace(text, 'Р', '_');
WriteLine(TextOut);